-- Beginner

--Which shippers do we have?
SELECT *
FROM [dbo].[Shippers]; -- Returned 3 Rows

-- 2. Certain fields from Categories
-- We only want to see two columns, CategoryName and Description. 
SELECT CategoryName, Description
FROM [dbo].[Categories]; -- Returned 2 columns & 8 Rows

-- 3. Sales Representatives
-- Return Employees with just FirstName, LastName, and HireDate of all the employees with the Title of Sales Representative.SELECT FirstName, LastName, HireDateFROM [dbo].[Employees]WHERE Title = 'Sales Representative'; -- Returned 6 Employees-- 4. Sales Representatives in the United StatesSELECT FirstName, LastNameFROM [dbo].[Employees]WHERE Title = 'Sales Representative' AND Country = 'USA'; -- Returned 3 employeesSELECT FirstName + ' ' + LastName AS EmployeeFROM [dbo].[Employees]WHERE Title = 'Sales Representative' AND Country = 'USA'; -- Returned 3 employeesSELECT CONCAT(FirstName,' ', LastName) AS EmployeeFROM [dbo].[Employees]WHERE Title = 'Sales Representative' AND Country = 'USA'; -- Returned 3 employees-- 5. Orders placed by specific EmployeeID--Show all the orders placed by a specific employee. The EmployeeID for this Employee (Steven Buchanan) is 5.SELECT *FROM [dbo].[Orders]SELECT *FROM [dbo].[Employees]SELECT *FROM [dbo].[Orders]WHERE EmployeeID = 5;SELECT OrderID, OrderDateFROM [dbo].[Orders]WHERE EmployeeID = 5; -- Returned 42 RowsSELECT COUNT(OrderID) AS [Count of Orders]FROM [dbo].[Orders]WHERE EmployeeID = 5;-- 6. Suppliers and ContactTitles--In the Suppliers table, show the SupplierID, ContactName, and ContactTitle for those Suppliers whose ContactTitle is not Marketing Manager.SELECT *FROM [dbo].[Suppliers]SELECT SupplierID, ContactName, ContactTitleFROM [dbo].[Suppliers]WHERE ContactTitle <> 'Marketing Manager'; -- Returned 24 Rows out of 29-- 7. Products with “queso” in ProductName-- In the products table, we’d like to see the ProductID and ProductName for those products where the ProductName includes the string “queso”.SELECT *FROM [dbo].[Products]SELECT ProductID, ProductNameFROM [dbo].[Products]WHERE ProductName LIKE '%queso%'; -- Returned 2 Rows-- 8. Orders shipping to France or Belgium-- Looking at the Orders table, there’s a field called ShipCountry. Write a query that shows the OrderID, CustomerID, and ShipCounty for the orders where the ShipCountry is either France or Belgium. SELECT *FROM [dbo].[Orders]SELECT OrderID, CustomerID,  ShipCountryFROM [dbo].[Orders]WHERE ShipCountry = 'France' OR ShipCountry = 'Belgium';SELECT OrderID, CustomerID,  ShipCountryFROM [dbo].[Orders]WHERE ShipCountry IN('France', 'Belgium');-- 9. Orders shipping to any country in Latin America-- Now, instead of just wanting to return all the orders from France of Belgium, we want to show all the orders from any Latin American country. But we don’t have a list of Latin American countries in a table in the Northwind database. So, we’re going to just use this list of Latin American countries that happen to be in the Orders table:
-- Brazil
-- Mexico
-- Argentina
-- VenezuelaSELECT *FROM [dbo].[Orders]SELECT OrderID, CustomerID,  ShipCountryFROM [dbo].[Orders]WHERE ShipCountry IN('Brazil','Mexico','Argentina','Venezuela'); -- 173 Rows Returned-- 10. Employees, in order of age-- For all the employees in the Employees table, show the FirstName, LastName, Title, and BirthDate. Order the results by BirthDate, so we have the oldest employees first.SELECT*FROM [dbo].[Employees]SELECT FirstName, LastName, Title, BirthDateFROM [dbo].[Employees]ORDER BY BirthDate ASC; -- 9 Rows Returned-- 11. Showing only the Date with a DateTime field-- In the output of the query above, showing the Employees in order of BirthDate, we see the time of the BirthDate field, which we don’t want. Show only the date portion of the BirthDate field.SELECT*FROM [dbo].[Employees]SELECT FirstName, LastName, Title, CAST(BirthDate AS DATE) AS BirthDateFROM [dbo].[Employees]ORDER BY BirthDate ASC; -- Returned 9 Rows-- 12. Employees full name-- Show the FirstName and LastName columns from the Employees table, and then create a new column called FullName, showing FirstName and LastName joined together in one column, with a space inbetween.SELECT *FROM [dbo].[Employees]SELECT FirstName,LastName, CONCAT(FirstName,' ', LastName) AS [Full Name]FROM [dbo].[Employees] - 9 Rows Returned-- 13. OrderDetails amount per line item-- In the OrderDetails table, we have the fields UnitPrice and Quantity. Create a new field, TotalPrice, that multiplies these two together. We’ll ignore the Discount field for now.-- In addition, show the OrderID, ProductID, UnitPrice, and Quantity. Order by OrderID and ProductID.SELECT *FROM [dbo].[OrderDetails]SELECT  OrderID, ProductID, UnitPrice, Quantity, (Quantity * UnitPrice) AS TotalPriceFROM [dbo].[OrderDetails]ORDER BY OrderID, ProductID; -- Returned 2155 RowsSELECT TOP 1 ProductID, UnitPriceFROM [dbo].[OrderDetails]ORDER BY UnitPrice DESC;SELECT TOP 3 ProductID, UnitPriceFROM [dbo].[OrderDetails]ORDER BY UnitPrice ASC;-- 14. How many customers?-- How many customers do we have in the Customers table? Show one value only, and don’t rely on getting the recordcount at the end of a resultsetSELECT *FROM [dbo].[Customers]SELECT COUNT(*) AS CustomerCountFROM [dbo].[Customers] -- 1 Row Returned-- 15. When was the first order?-- Show the date of the first order ever made in the Orders table.SELECT *FROM [dbo].[Orders]SELECT TOP 1 OrderDateFROM [dbo].[Orders]ORDER BY OrderDate ASC -- 1 Row ReturnedSELECT MIN(OrderDate) AS FirstOrderDateFROM [dbo].[Orders]SELECT TOP 1 OrderID, MIN(OrderDate) AS FirstOrderDateFROM [dbo].[Orders]GROUP BY OrderID;SELECT DISTINCT(OrderID)FROM [dbo].[Orders]SELECT *FROM [dbo].[Employees]SELECT DISTINCT(Title)FROM [dbo].[Employees]SELECT Title, COUNT(*)FROM [dbo].[Employees]GROUP BY Title;SELECT Country, COUNT(*)FROM [dbo].[Employees]GROUP BY Country;-- 16. Countries where there are customers-- Show a list of countries where the Northwind company has customers.SELECT *FROM [dbo].[Customers]SELECT CountryFROM [dbo].[Customers]SELECT DISTINCT CountryFROM [dbo].[Customers] -- Returned 21 Rows-- 17. Contact titles for customers-- Show a list of all the different values in the Customers table for ContactTitles. Also include a count for each ContactTitle.-- This is similar in concept to the previous question “Countries where there are customers”, except we now want a count for each ContactTitle.SELECT *FROM [dbo].[Customers]-- Show a list of all the different values in the Customers table for ContactTitles.SELECT DISTINCT ContactTitleFROM [dbo].[Customers]SELECT ContactTitle, COUNT(*)FROM [dbo].[Customers]GROUP BY ContactTitle; -- 12 Rows Returned-- 18. Products with associated supplier names-- We’d like to show, for each product, the associated Supplier. Show the ProductID, ProductName, and the CompanyName of the Supplier. Sort by ProductID.-- This question will introduce what may be a new concept, the Join clause in SQL. The Join clause is used to join two or more relational database tables together in a logical way. -- Here’s a data model of the relationship between Products and Suppliers. SELECT*FROM [dbo].[Products]SELECT*FROM [dbo].[Suppliers]SELECT ProductID, ProductName, S.CompanyName AS SupplierNameFROM [dbo].[Products] AS PINNER JOIN [dbo].[Suppliers] AS SON P.SupplierID = S.SupplierID;